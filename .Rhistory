library(datasets)
data(iris)
>iris
?iris
iris
sapply(iris,mean)
class(iris)
summary(iris)
sapply(iris,"virginica",mean)
sapply(iris[,"virginica"],mean)
head(iris)
rowMeans(iris[, 101:150])
rowMeans(iris[, 1:4])
rowMeans(iris[101:150,)
apply(iris[101:150,], 2, mean)
iris[1,]
iris[101,]
iris[101:150,]
apply(iris[101:150,],mean)
rowMeans(iris[101:150,])
meam(iris[101:150,])
mean(iris[101:150,])
mean(iris[101:150,1])
iris[101:150,1]
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
data(mtcars)
?mtcars
head(mtcars)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls
quit()
data()
data(rivers)
head(rivers)
length(rivers)
summary(rivers)
rivers
stem(rivers)
stem(log(rivers))
?stem
hist(rivers, col="#333333", border="white", breaks=25)
hist(rivers, col="#333555", border="white", breaks=25)
hist(rivers, col="#333555", border="yellow", breaks=25)
hist(rivers, col="#333555", border="yellow", breaks=5)
hist(rivers, col="#333555", border="yellow", breaks=50)
hist(log(rivers), col="#333333", border="white", breaks=25)
data(discoveries)
discoveries
?discoveries
round(runif(7, min=.5, max=6.5))
letters
?gsub
data(infert)
infert$education
head(infert)
list1 <- list(time(1:40))
list1
list1$time
list1$price[4]
mat <- matrix(nrow = 3, ncol = 2, c(1,2,3,4,5,6))
mat
apply(mat, MAR = 2, myFunc)
install.packages("plyr")
require(plyr)
?plyr
pets <- read.csv("http://learnxinyminutes.com/docs/pets.csv")
pets
getwd()
write.csv(pets, "pets2.csv")
plot(list1$time, list1$price, main = "fake data")
list1
linearModel <- lm(price  ~ time, data = list1)
list1$price = c(rnorm(40,.5*list1$time,4))
list1
hist(rpois(n = 10000, lambda = 5), col = "thistle")
barplot(c(1,4,5,1,2), names.arg = c("red","blue","purple","green","yellow"))
quit()
setwd("F:/R Data")
dir()
setwd("rprog-data-ProgAssignment3-data/")
dir()
source("best.R")
state <- "MD"
outcome<- "pneumonia"
## Read outcome data
outcome_a <- read.csv("outcome-of-care-measures.csv")
##get states names
outcome_states <-outcome_a[,7]
index <-duplicated(outcome_states)
outcome_states_only <-outcome_states[!index]
##get outcomes names
outcome_names <- c("heart attack","heart failure", "pneumonia")
## Check that state and outcome are valid
##invalid outcome
b <-0
for(i in outcome_names)
{
if(i==outcome){
##转化成首字母大写
outcome <-capwords(outcome)
outcome_names_full <-paste("Hospital 30-Day Death (Mortality) Rates from",outcome, sep =" ")
b <- b+1
}
}
if(b==0){
stop("invalid outcome")
}
##invalid state
c<- 0
for(i in outcome_states_only)
{
if(i==state){
outcome_a <-outcome_a[outcome_a["State"]==state,]
c <- c+1
}
}
if(c==0){
stop("invalid state")
}
##creat a df for col_name
col_name <-c("Provider Number","Hospital Name","Address 1","Address 2","Address 3","City","State","ZIP Code","County Name","Phone Number","Hospital 30-Day Death (Mortality) Rates from Heart Attack","Comparison to U.S. Rate - Hospital 30-Day Death (Mortality) Rates from Heart Attack","Lower Mortality Estimate - Hospital 30-Day Death (Mortality) Rates from Heart Attack","Upper Mortality Estimate - Hospital 30-Day Death (Mortality) Rates from Heart Attack","Number of Patients - Hospital 30-Day Death (Mortality) Rates from Heart Attack","Footnote - Hospital 30-Day Death (Mortality) Rates from Heart Attack","Hospital 30-Day Death (Mortality) Rates from Heart Failure","Comparison to U.S. Rate - Hospital 30-Day Death (Mortality) Rates from Heart Failure","Lower Mortality Estimate - Hospital 30-Day Death (Mortality) Rates from Heart Failure","Upper Mortality Estimate - Hospital 30-Day Death (Mortality) Rates from Heart Failure","Number of Patients - Hospital 30-Day Death (Mortality) Rates from Heart Failure","Footnote - Hospital 30-Day Death (Mortality) Rates from Heart Failure","Hospital 30-Day Death (Mortality) Rates from Pneumonia","Comparison to U.S. Rate - Hospital 30-Day Death (Mortality) Rates from Pneumonia","Lower Mortality Estimate - Hospital 30-Day Death (Mortality) Rates from Pneumonia","Upper Mortality Estimate - Hospital 30-Day Death (Mortality) Rates from Pneumonia","Number of Patients - Hospital 30-Day Death (Mortality) Rates from Pneumonia","Footnote - Hospital 30-Day Death (Mortality) Rates from Pneumonia","Hospital 30-Day Readmission Rates from Heart Attack","Comparison to U.S. Rate - Hospital 30-Day Readmission Rates from Heart Attack","Lower Readmission Estimate - Hospital 30-Day Readmission Rates from Heart Attack","Upper Readmission Estimate - Hospital 30-Day Readmission Rates from Heart Attack","Number of Patients - Hospital 30-Day Readmission Rates from Heart Attack","Footnote - Hospital 30-Day Readmission Rates from Heart Attack","Hospital 30-Day Readmission Rates from Heart Failure","Comparison to U.S. Rate - Hospital 30-Day Readmission Rates from Heart Failure","Lower Readmission Estimate - Hospital 30-Day Readmission Rates from Heart Failure","Upper Readmission Estimate - Hospital 30-Day Readmission Rates from Heart Failure","Number of Patients - Hospital 30-Day Readmission Rates from Heart Failure","Footnote - Hospital 30-Day Readmission Rates from Heart Failure","Hospital 30-Day Readmission Rates from Pneumonia","Comparison to U.S. Rate - Hospital 30-Day Readmission Rates from Pneumonia","Lower Readmission Estimate - Hospital 30-Day Readmission Rates from Pneumonia","Upper Readmission Estimate - Hospital 30-Day Readmission Rates from Pneumonia","Number of Patients - Hospital 30-Day Readmission Rates from Pneumonia","Footnote - Hospital 30-Day Readmission Rates from Pneumonia")
col_df <-data.frame(col_name,stringsAsFactors = FALSE)
##change name to index
name_to_index <-which(col_df==outcome_names_full)
##get a new data.frame for hospital and mor ,no NA
##outcome_a[,name_to_index] <-as.numeric(outcome_a[,name_to_index])
outcome_a<-outcome_a[(outcome_a[,name_to_index]!="Not Available"),]
##empty df
length_a <-length.POSIXlt(outcome_a)
outcome_s <-data.frame(1:length_a)
##input new col to new df
outcome_s<-cbind(outcome_s,outcome_a[,2])
outcome_s<-cbind(outcome_s,outcome_a[,name_to_index])
outcome_s
outcome_s[order(outcome_a[, name_to_index]),]
which.min(outcome_s[[3]])
which.min(outcome_s[[1]])
which.min(outcome_s[[2]])
